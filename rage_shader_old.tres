[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

const float PI = 3.14159265;

uniform vec2 canvas_size = vec2(1280., 720.);
uniform float scale:hint_range(1.0, 32.0);
uniform float strength:hint_range(0.0, 3.0);
uniform float y_strength:hint_range(0.0, 3.0);
uniform float p_time:hint_range(0.0, 1.0);
uniform float seethe_timescale: hint_range(1.0, 8.0);
// GLSL textureless classic 2D noise \\\"cnoise\\\",
// with an RSL-style periodic variant \\\"pnoise\\\".
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-08-22
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/stegu/webgl-noise
//

vec4 mod289(vec4 x) {
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
    return mod289(((x * 34.0) + 1.0) * x);
}

vec4 taylorInvSqrt(vec4 r) {
    return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
}
/*
// Classic Perlin noise
float cnoise(vec2 P) {
    vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod289(Pi); // To avoid truncation effects in permutation
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;

    vec4 i = permute(permute(ix) + iy);

    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
    vec4 gy = abs(gx) - 0.5 ;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;

    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);

// ADDITION: Rotate angle vectors //
    vec2 time_sc = vec2(sin(p_time * 6.283153), cos(p_time * 6.283153));
    mat2 rotation_matrix = mat2(
		vec2(time_sc.x, -time_sc.y),
		vec2(time_sc.y,  time_sc.x)
	);
	g00 *= rotation_matrix;
	g10 *= rotation_matrix;
	g01 *= rotation_matrix;
	g11 *= rotation_matrix;
// END ADDITION //
    
    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;
    
    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));
    
    vec2 fade_xy = fade(Pf.xy);
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}
*/

// Classic Perlin noise, periodic variant
float pnoise(vec2 P, vec2 rep) {
    vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod(Pi, vec4(rep, rep)); // To create noise with explicit period
    Pi = mod289(Pi); // To avoid truncation effects in permutation
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;
    
    vec4 i = permute(permute(ix) + iy);
    
    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
    vec4 gy = abs(gx) - 0.5 ;
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx;
    
    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);

// ADDITION: Rotate angle vectors //
	float s_time = p_time * PI * 2. * seethe_timescale;
	vec2 time_sc = vec2(sin(s_time), cos(s_time));
	mat2 rotation_matrix = mat2(
		vec2(time_sc.x, -time_sc.y),
		vec2(time_sc.y,  time_sc.x)
	);
	g00 *= rotation_matrix;
	g10 *= rotation_matrix;
	g01 *= rotation_matrix;
	g11 *= rotation_matrix;
// END ADDITION //
    
    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;

    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));
    
    vec2 fade_xy = fade(Pf.xy);
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
    return 2.3 * n_xy;
}

uniform vec3 col0 = vec3(0.0, 0.0, 0.0);
uniform float thres0 = 0.3;
uniform vec3 col1 = vec3(0.6, 0.3, 0.0);
uniform float thres1 = 0.65;
uniform vec3 col2 = vec3(1.0, 0.7, 0.2);
uniform float thres2 = 0.9;
uniform vec3 col3 = vec3(1.0, 1.0, 0.6);
uniform float thres3 = 1.0;
uniform vec3 col4 = vec3(1.0, 1.0, 1.0);
vec3 colorize(float x) {
	return mix(
		mix(
			mix(
				col0, col1, smoothstep(0.0, thres0, x)
			), mix(
				col2, col3, smoothstep(thres1, thres2, x)
			), smoothstep(thres0, thres1, x)
		), col4,
		smoothstep(thres2, thres3, x)
	);
}

void fragment() {
	vec2 uv = (UV - vec2(0.5, 0.5)) * canvas_size / 1024.;
	vec2 tileSize = vec2(128.0, 3.0);
	vec2 uvPerlin = scale * uv;
	
	float v = pnoise(uvPerlin + vec2(0., tileSize.y * p_time), tileSize);
	v += pnoise(uvPerlin * 2.8 + vec2(0., tileSize.y * p_time), tileSize) * 0.3;
	v *= strength;
	v += y_strength * (uv.y);
	
	COLOR.rgb = COLOR.rgb + colorize(v);
	//COLOR.rgb = uv.xyx;
}"
